openapi: 3.0.2
info:
  title: NeuVue Queue REST API
  description: NeuVue Queue REST API documentation.
  version: 0.4.0

servers:
  - url: https://localhost:80/
    description: Main development server.

components:
  parameters:
    pageParam:
      in: query
      name: p
      schema:
        type: integer
        minimum: 0
        default: 0
      required: false
      description: Current page.
    pageSizeParam:
      in: query
      name: pageSize
      schema:
        type: integer
        minimum: 1
        default: 100
      required: false
      description: Set the number of items returned per page.
    populateParam:
      in: query
      name: populate
      schema:
        type: string
      required: false
      description: >
        Replace the document id in the provided field in each object with its corresponding document.
        To populate multiple fields per object, pass a string containing each field separated by a comma.
    queryParam:
      in: query
      name: q
      schema:
        type: object
      required: false
      description: Query object as JSON. Supports MongoDB statements.
    selectParam:
      in: query
      name: select
      schema:
        type: string
      required: false
      description: >
        Select a subset of fields in each object. To select multiple fields per object,
        pass a string containing each field separated by a comma.
    sortParam:
      in: query
      name: sort
      schema:
        type: string
      required: false
      description:
        Fields to sort on. To sort on multiple fields, pass a string containing
        each sort statement separated by a command.

  responses:
    Forbidden:
      description: Prohibited from accessing the specified resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: prohibited user, or missing a whitelisted audience and/or role

    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: not found
    Unauthorized:
      description: Authentication failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: missing access token
    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: internal server error

  schemas:
    Point:
      type: object
      properties:
        _id:
          type: string
        active:
          type: boolean
        author:
          type: string
        coordinate:
          type: array
          items:
            type: number
          minItems: 3
          maxItems: 3
        created:
          type: integer
          minimum: 0
        metadata:
          type: object
        namespace:
          type: string
        submitted:
          type: integer
          minimum: 0
        type:
          type: string
      required:
        - author
        - coordinate
        - created
        - namespace
        - type
        - volume
    Task:
      type: object
      properties:
        _id:
          type: string
        active:
          type: boolean
        assignee:
          type: string
        author:
          type: string
        closed:
          type: integer
          minimum: 0
        created:
          type: integer
          minimum: 0
        instructions:
          type: object
        metadata:
          type: object
        namespace:
          type: string
        opened:
          type: integer
          minimum: 0
        priority:
          type: number
          minimum: 0
        duration:
          type: number
          minimum: 0
        status:
          type: string
          enum:
            - completed
            - errored
            - open
            - pending
        neuron_status:
          type: string
          enum:
            - complete
            - incomplete
        points:
          type: object
      required:
        - assignee
        - author
        - instructions
        - namespace
        - priority
        - duration

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []    

paths:  
  /points:
    get:
      tags:
        - Points
      summary: Get paginated list of Points.
      parameters:
        - $ref: '#/components/parameters/queryParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/populateParam'
        - $ref: '#/components/parameters/selectParam'
        - $ref: '#/components/parameters/sortParam'
      responses:
        '200':
          description: A JSON array of Point objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Point'
        '400':
          description: Bad request. The query param q must be a valid JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Points
      summary: Creates one or more Points.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Point'
      responses:
        '201':
          description: Created. A JSON array of Point objects with IDs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Point'
        '400':
          description: Bad request. One or more of the Point objects are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /points/{pointId}:
    parameters:
      - name: pointId
        in: path
        required: true
        description: Point ID.
        schema:
          type: string
    delete:
      tags:
        - Points
      summary: Deactivates a Point by ID.
      responses:
        '204':
          description: The Point has been deactivated.
        '400':
          description: Bad request. The ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Points
      summary: Returns a point by ID.
      responses:
        '200':
          description: A point object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Point'
        '400':
          description: Bad request. The ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /Tasks:
    get:
      tags:
        - Tasks
      summary: Get paginated list of tasks.
      parameters:
        - $ref: '#/components/parameters/queryParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/populateParam'
        - $ref: '#/components/parameters/selectParam'
        - $ref: '#/components/parameters/sortParam'
      responses:
        '200':
          description: A JSON array of task objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Bad request. The query param q must be a valid JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Tasks
      summary: Creates one or more tasks.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Created. A JSON array of task objects with IDs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Bad request. One or more of the task objects are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks/{taskId}:
    parameters:
      - name: taskId
        in: path
        required: true
        description: task ID.
        schema:
          type: string
    delete:
      tags:
        - Tasks
      summary: Deactivates a task by ID.
      responses:
        '204':
          description: The task has been deactivated.
        '400':
          description: Bad request. The ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Tasks
      summary: Returns a task by ID.
      responses:
        '200':
          description: A task object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request. The ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks/{taskId}/instructions:
    patch:
      tags:
        - Tasks
      summary: Set the instructions of a task
      parameters:
        - name: taskId
          in: path
          required: true
          description: task ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: The instructions have been changed. Returns the previous task object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request. The ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks/{taskId}/priority:
    patch:
      tags:
        - Tasks
      summary: Set the priority of a task
      parameters:
        - name: taskId
          in: path
          required: true
          description: task ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                priority:
                  type: number
                  minimum: 0
      responses:
        '200':
          description: The priority has been changed. Returns the previous task object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request. The ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks/{taskId}/duration:
    patch:
      tags:
        - Tasks
      summary: Set the duration of a task
      parameters:
        - name: taskId
          in: path
          required: true
          description: task ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                duration:
                  type: number
                  minimum: 0
      responses:
        '200':
          description: The duration has been changed. Returns the previous task object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request. The ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks/{taskId}/status:
    patch:
      tags:
        - Tasks
      summary: Set the status of a task
      parameters:
        - name: taskId
          in: path
          required: true
          description: task ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - complete
                    - errored
                    - open
                    - pending
      responses:
        '200':
          description: The status has been changed. Returns the previous task object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request. The ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
